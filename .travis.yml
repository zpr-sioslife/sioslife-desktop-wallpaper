# TODO:
#  - convert to use stages, at least:
#      - build
#      - test (even if empty)
#      - upload
#    https://docs.travis-ci.com/user/build-stages/
#  - setup signing
#    https://www.electron.build/code-signing#where-to-buy-code-signing-certificate
#

matrix:
  include:
    - os: linux
      services: docker
      # even though we don't build anything in the "docker" mode, it's best to define the language as node_js
      # so that we can manipulate node_modules if needed
      language: generic
      env:
        # - NODE_ENV=production # https://stackoverflow.com/questions/38083622/why-travis-ci-no-run-npm-install-in-node-env-production
        # - DEBUG=electron-builder

    - os: osx
      osx_image: xcode9.4
      language: node_js
      # # nodejs version as per example in https://github.com/develar/onshape-desktop-shell/blob/master/.travis.yml
      node_js: 10
      env:
        # - NODE_ENV=production https://stackoverflow.com/questions/38083622/why-travis-ci-no-run-npm-install-in-node-env-production
        # - DEBUG=electron-builder

env:
  global:
    - WHAT_PACKER=npm
    - ELECTRON_CACHE=$HOME/.cache/electron
    - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder

branches:
  only:
    - master
    - develop

# Travis-drive upload of binary artifacts (approach #1)
# addons:
#
# TRAVIS::1 (optional)
# apt:
#   packages:

# TRAVIS::2 (optional)
cache:
  directories:
    - node_modules
    - $HOME/.cache/electron
    - $HOME/.cache/electron-builder
    # - $HOME/.npm
    # - $HOME/.yarn-cache

# TRAVIS::3
before_install:
  - echo "TRAVIS_ID>> ($TRAVIS_BUILD_NUMBER::$TRAVIS_JOB_NUMBER)($TRAVIS_BUILD_ID::$TRAVIS_JOB_ID) at:3.before_install"
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        lscpu
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      uname -a
      sw_vers
      sysctl -n machdep.cpu.brand_string
      sysctl -e hw.memsize
      df -h
    fi

  # dump variables in the worker for troubleshooting purposes
  - bash -c "set"                   || true

  - echo "########################################### 30a"
  - pwd                                   || true
  - ls -la ${HOME}                        || true
  - ls -la ${TRAVIS_BUILD_DIR}            || true
  - ls -la ${TRAVIS_BUILD_DIR}/dist       || true
  # - ls -la ${TRAVIS_BUILD_DIR}/node_modules || true
  - echo "########################################### 30z"

  # git-lfs may no be installed on travis-ci mac image
  # also, trying workaround for https://github.com/travis-ci/travis-ci/issues/8552
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      HOMEBREW_NO_AUTO_UPDATE=1 time brew install git-lfs
    fi

  - git  --version
  - git-lfs version || true
  # git-lfs pull because the repo may be lfs-enabled and the worker may not have git-lfs installed
  - time git-lfs pull

  - node --version
  - time npm i -g npm@latest
  # - time npm i -g yarn@latest
  - npm  --version
  # - yarn --version
  # # # not really necessary, as we are already in node 8
  # # - npm i -g npm@5
  # - yarn update
  # - cd app-1
  # - |
  #   if [ "${WHAT_PACKER}" == "npm" ]; then
  #     time npm rebuild
  #   else
  #     time yarn install --force
  #   fi
  # prevents problems by having cache shared between different OS
  # this is not necessary in Travis unless all matrix, os and env variables are the same
  #   https://docs.travis-ci.com/user/caching#Fetching-and-storing-caches
  # if this was not the case, we would need to use the following
  # # - npm rebuild
  # - yarn install --force

# TRAVIS::4
install:
  - echo "TRAVIS_ID>> ($TRAVIS_BUILD_NUMBER::$TRAVIS_JOB_NUMBER)($TRAVIS_BUILD_ID::$TRAVIS_JOB_ID) at:4.install"
  - |
    if [ "${WHAT_PACKER}" == "npm" ]; then
      time npm i
    else
      time yarn
    fi

  - echo "########################################### 40a"
  - pwd                                   || true
  - ls -la ${HOME}                        || true
  - ls -la ${TRAVIS_BUILD_DIR}            || true
  - ls -la ${TRAVIS_BUILD_DIR}/app-1/dist || true
  # - ls -la ${TRAVIS_BUILD_DIR}/node_modules || true
  - echo "########################################### 40z"

# TRAVIS::5
before_script:
  - echo "TRAVIS_ID>> ($TRAVIS_BUILD_NUMBER::$TRAVIS_JOB_NUMBER)($TRAVIS_BUILD_ID::$TRAVIS_JOB_ID) at:5.before_script"

# TRAVIS::6
script:
  - echo "TRAVIS_ID>> ($TRAVIS_BUILD_NUMBER::$TRAVIS_JOB_NUMBER)($TRAVIS_BUILD_ID::$TRAVIS_JOB_ID) at:6.script"

  # make Windows (via docker+wine) and OSX builds
  # in the case of Windows:
  # * dump environment variables
  # * implement workaround to change all relevant files from UID=0 (root inside docker) to UID.
  #   (we could use TRAVIS_UID but UID would be available also in Mac - even though this is not so relevant)
  #
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      ENVS=`env | grep -iE '^(DEBUG|NODE_|ELECTRON_|NPM_|CI|TRAVIS|WIN_CSC_|CSC_|GH_|AWS_|BUILD_)([A-Z]|_)*=' | sed -n '/^[^\t]/s/=.*//p' | sed '/^$/d' | sed 's/^/-e /g' | tr '\n' ' '`
      docker run $ENVS --rm \
        --env ELECTRON_CACHE="/root/.cache/electron" \
        --env ELECTRON_BUILDER_CACHE="/root/.cache/electron-builder" \
        --env X_RESET_UID=$UID \
        -v ${PWD}:/project \
        -v $HOME/.npm:/root/.npm \
        -v $HOME/.yarn-cache:/root/.yarn-cache \
        -v $HOME/.cache/electron:/root/.cache/electron \
        -v $HOME/.cache/electron-builder:/root/.cache/electron-builder \
        electronuserland/builder:wine \
        /bin/bash -c "\
            set &&\
            time ${WHAT_PACKER} run build:react && ${WHAT_PACKER} run build:electron -- --publish always --win  &&\
            echo about to change UIDs to \$X_RESET_UID &&\
            chown -R \$X_RESET_UID \
              . \
              /root
        "
    else
      if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        time ${WHAT_PACKER} run build:react && ${WHAT_PACKER} run build:electron -- --publish always --mac
      fi
    fi

  # - ../utils/generate-dist-flat.sh ./dist ./dist.no-ver stable

  # # find files and folders with whitespace in the name (as it could cause some issues)
  # - find .     -name "* *"          || true
  # - find $HOME -name "* *"          || true
  # - ls -laR ./dist/win-unpacked          || true

  - echo "########################################### 63a"
  - pwd                                   || true
  - ls -la ${HOME}                        || true
  - ls -la ${TRAVIS_BUILD_DIR}            || true
  - ls -la ${TRAVIS_BUILD_DIR}/dist       || true
  - echo "########################################### 63z"
  # - ls -la $HOME/.cache/*       || true
  # - ls -la $HOME/.casher/*      || true
  # # - ls -la $HOME/.ccache/*      || true
  # - ls -la $HOME/.electron*/*   || true
  # - ls -la $HOME/.npm/*         || true
  # # - ls -la $HOME/.packer.d/*    || true
  # # - ls -la $HOME/.travis/*      || true
  # # - ls -la $HOME/bin/*          || true
  # # - ls -la $HOME/build/*        || true
  # # - ls -la $HOME/builds/*       || true
  # # - ls -la /tmp                 || true

# TRAVIS::7 (optional) for cleaning up cache
before_cache:
  - echo "TRAVIS_ID>> ($TRAVIS_BUILD_NUMBER::$TRAVIS_JOB_NUMBER)($TRAVIS_BUILD_ID::$TRAVIS_JOB_ID) at:7.before_cache"
  - pwd
  - |
    du --depth 1 \
        node_modules \
        $HOME/.cache/electron \
        $HOME/.cache/electron-builder \
        $HOME/.npm \
        $HOME/.yarn-cache | sort -nr

# #  - if [ -d node_modules/node-sass ]; then rm -rf node_modules/node-sass; fi
#   - rm -rf node_modules/node-sass    || true
# #   #- rm -rf $HOME/.cache/electron-builder/wine
# #   - |
# #     rm -rf \
# #       $HOME/.cache/electron-builder/nsis/nsis-*/ \
# #       node_modules/node-sass \
# #       node_modules/webdriver-js-extender
# #  - find node_modules                     -name "* *"          || true
#   - find $HOME/.cache/electron           -name "* *"          || true
#   - find $HOME/.cache/electron-builder   -name "* *"          || true
#   - find $HOME/.npm                      -name "* *"          || true
#   - find $HOME/.yarn-cache               -name "* *"          || true

# CACHE UPLOAD HAPPENS SOMEWHERE BETWEEN ::7 and ::8

# TRAVIS::8a
after_success:
  - echo "TRAVIS_ID>> ($TRAVIS_BUILD_NUMBER::$TRAVIS_JOB_NUMBER)($TRAVIS_BUILD_ID::$TRAVIS_JOB_ID) at:8a.after_success"

# TRAVIS::8b
after_failure:
  - echo "TRAVIS_ID>> ($TRAVIS_BUILD_NUMBER::$TRAVIS_JOB_NUMBER)($TRAVIS_BUILD_ID::$TRAVIS_JOB_ID) at:8b.after_failure"

# TRAVIS::9 (optional)
before_deploy:
  - echo "TRAVIS_ID>> ($TRAVIS_BUILD_NUMBER::$TRAVIS_JOB_NUMBER)($TRAVIS_BUILD_ID::$TRAVIS_JOB_ID) at:9.before_deploy"
  - pwd
  - echo "########################################### 91a"
  - pwd                                   || true
  - ls -la ${HOME}                        || true
  - ls -la ${TRAVIS_BUILD_DIR}            || true
  - ls -la ${TRAVIS_BUILD_DIR}/dist       || true
  - echo "########################################### 91z"
  # prunes unwanted files from artifacts (we keep only packed files)
  - pwd                                         || true
  - ls -la ${TRAVIS_BUILD_DIR}/dist/*-unpacked  || true
  - rm -rf ${TRAVIS_BUILD_DIR}/dist/*-unpacked  || true
  - rm -rf ${TRAVIS_BUILD_DIR}/dist/mac         || true
  - echo "########################################### 93a"
  - pwd                                   || true
  - ls -la ${HOME}                        || true
  - ls -la ${TRAVIS_BUILD_DIR}            || true
  - ls -la ${TRAVIS_BUILD_DIR}            || true
  - ls -la ${TRAVIS_BUILD_DIR}/dist       || true
  - echo "########################################### 93z"

# TRAVIS::10 (optional)
# https://docs.travis-ci.com/user/deployment/
# deploy:
#   # # https://docs.travis-ci.com/user/deployment/script/
#   # - provider: script
#   #   # on:
#   #   #   branch: master
#   #   #   tags: true
#   #   # for manual upload, use this instead of after_success so we can customize by branch if needed
#   #   script: yarn run upload:s3 -- --force
#   #   skip_cleanup: true

#   # https://docs.travis-ci.com/user/deployment/s3/
#   - provider: s3
#     on:
#       branch: test--macos
#     # instead of havig to deal with git-stash issues,
#     # since we have already pruned ./dist from non-relevant files, we can simply specify local_dir
#     skip_cleanup: true
#     local_dir: ${TRAVIS_BUILD_DIR}/app-1/dist
#     upload-dir: ${ARTIFACTS_TARGET_ROOT}/update/test

#     bucket: $ARTIFACTS_S3_BUCKET
#     region: $ARTIFACTS_S3_REGION
#     acl: public_read

#     # cache_control: "public, no-cache"
#     cache_control: "public,max-age=31536000"

#   - provider: s3
#     on:
#       branch: develop
#     # instead of havig to deal with git-stash issues,
#     # since we have already pruned ./dist from non-relevant files, we can simply specify local_dir
#     skip_cleanup: true
#     local_dir: ${TRAVIS_BUILD_DIR}/app-1/dist
#     upload-dir: ${ARTIFACTS_TARGET_ROOT}/update/beta

#     bucket: $ARTIFACTS_S3_BUCKET
#     region: $ARTIFACTS_S3_REGION
#     acl: public_read

#     # cache_control: "public, no-cache"
#     cache_control: "public,max-age=31536000"

#   - provider: s3
#     on:
#       branch: master
#     # instead of havig to deal with git-stash issues,
#     # since we have already pruned ./dist from non-relevant files, we can simply specify local_dir
#     skip_cleanup: true
#     local_dir: ${TRAVIS_BUILD_DIR}/app-1/dist
#     upload-dir: ${ARTIFACTS_TARGET_ROOT}/update

#     bucket: $ARTIFACTS_S3_BUCKET
#     region: $ARTIFACTS_S3_REGION
#     acl: public_read

#     # cache_control: "public, no-cache"
#     cache_control: "public,max-age=31536000"

#   - provider: s3
#     on:
#       branch: master
#     # instead of havig to deal with git-stash issues,
#     # since we have already pruned ./dist from non-relevant files, we can simply specify local_dir
#     skip_cleanup: true
#     local_dir: ${TRAVIS_BUILD_DIR}/app-1/dist.no-ver
#     upload-dir: ${ARTIFACTS_TARGET_ROOT}/download

#     bucket: $ARTIFACTS_S3_BUCKET
#     region: $ARTIFACTS_S3_REGION
#     acl: public_read

#     # cache_control: "public, no-cache"
#     cache_control: "public,max-age=31536000"

#   # https://docs.travis-ci.com/user/deployment/releases/
#   - provider: releases

# TRAVIS::11 (optional)
after_deploy:
  - echo "TRAVIS_ID>> ($TRAVIS_BUILD_NUMBER::$TRAVIS_JOB_NUMBER)($TRAVIS_BUILD_ID::$TRAVIS_JOB_ID) at:11.after_deploy"

# TRAVIS::12
after_script:
  - echo "TRAVIS_ID>> ($TRAVIS_BUILD_NUMBER::$TRAVIS_JOB_NUMBER)($TRAVIS_BUILD_ID::$TRAVIS_JOB_ID) at:12.after_script"
### examples
# https://www.electron.build/multi-platform-build
#   https://github.com/develar/onshape-desktop-shell/blob/master/.travis.yml
#
# https://github.com/electron-userland/electron-builder/blob/master/.travis.yml
#
